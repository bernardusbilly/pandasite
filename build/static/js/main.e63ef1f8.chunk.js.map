{"version":3,"sources":["pages/home/index.js","App.js","serviceWorker.js","index.js"],"names":["Home","react_default","a","createElement","className","react_router_dom","to","es_button","type","icon","tabs","TabPane","tab","key","href","target","rel","style","fontSize","marginRight","Component","App","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSA4DeA,2LAnDX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,KAAT,WACJL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,UAAT,SACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,aAAT,YACAL,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMC,GAAG,YAAT,WACAL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAQC,KAAK,OAAOC,KAAK,UAE3BR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAACO,EAAA,EAAKC,QAAN,CAAcC,IAAI,SAAIC,IAAI,IAAIT,UAAU,SACtCH,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,iHAIFF,EAAAC,EAAAC,cAACO,EAAA,EAAKC,QAAN,CAAcC,IAAI,SAAIC,IAAI,IAAIT,UAAU,SACtCH,EAAAC,EAAAC,cAAA,qBACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,0EAIFF,EAAAC,EAAAC,cAACO,EAAA,EAAKC,QAAN,CAAcC,IAAI,SAAIC,IAAI,IAAIT,UAAU,SACtCH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,4FAMNF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAGW,KAAK,wBAAwBC,OAAO,SAASC,IAAI,uBAAsBf,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMD,KAAK,YAAYS,MAAO,CAAEC,SAAU,OAAQC,YAAa,WACzIlB,EAAAC,EAAAC,cAAA,KAAGW,KAAK,uBAAuBC,OAAO,SAASC,IAAI,uBAAsBf,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMD,KAAK,WAAWS,MAAO,CAAEC,SAAU,YAEpHjB,EAAAC,EAAAC,cAAA,KAAGW,KAAK,0BAA0BC,OAAO,SAASC,IAAI,sBAAsBZ,UAAU,QAAtF,iBA5CSgB,cCeJC,2LAbX,OACEpB,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KACErB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWzB,IACjCC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWzB,IACtCC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWzB,IACzCC,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,WAAWC,UAAWzB,aARhCoB,cCKEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e63ef1f8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport { Button, Tabs, Icon } from 'antd';\nimport { Link } from 'react-router-dom';\n\nimport './style.scss';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className='pd-homepage pd-container'>\n        <header>\n          <h1><Link to='/'>Panda.</Link></h1>\n          <div className='pd-homepage-menu'>\n            <Link to='/about'>About</Link>\n            <Link to='/services'>Services</Link>\n            <Link to='/contact'>Contact</Link>\n            <Button type='link' icon='menu'/>\n          </div>\n          <Tabs>\n            <Tabs.TabPane tab='•' key='1' className='tab-1'>\n              <div>We</div>\n              <div>Build</div>\n              <div>Identity.</div>\n              <p>\n                PandaTech is a full service Branding, design, and development studio based in the heart of Jakarta.\n              </p>\n            </Tabs.TabPane>\n            <Tabs.TabPane tab='•' key='2' className='tab-2'>\n              <div>Create</div>\n              <div>Magnificant</div>\n              <div>Application</div>\n              <p>\n                From website, mobile app, to desktop app based on your need.\n              </p>\n            </Tabs.TabPane>\n            <Tabs.TabPane tab='•' key='3' className='tab-3'>\n              <div>Also</div>\n              <div>Tech</div>\n              <div>Consulting</div>\n              <p>\n                We also provide the service for consulting your business from the tech side.\n              </p>\n            </Tabs.TabPane>\n          </Tabs>\n        </header>\n        <footer>\n          <div className='social-media'>\n            <a href='https://instagram.com' target='_blank' rel='noopener noreferrer'><Icon type='instagram' style={{ fontSize: '40px', marginRight: '40px' }} /></a>\n            <a href='https://facebook.com' target='_blank' rel='noopener noreferrer'><Icon type='facebook' style={{ fontSize: '40px' }}/></a>\n          </div>\n          <a href='https://squarespace.com' target='_blank' rel='noopener noreferrer' className='blog'>\n            Blog\n          </a>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React, { Component } from 'react';\nimport { HashRouter, Switch, Route } from 'react-router-dom';\n\nimport Home from './pages/home';\n\nimport './App.scss';\n\nclass App extends Component {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route exact path='/about' component={Home}/>\n          <Route exact path='/services' component={Home}/>\n          <Route exact path='/contact' component={Home}/>\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}